package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"os"

	"github.com/zainul/pintu/graph/model"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
	"gorm.io/gorm/schema"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	return DBTodo[0], nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return DBTodo, nil
}

// Companies is the resolver for the companies field.
func (r *queryResolver) Companies(ctx context.Context) ([]*model.Company, error) {
	comp := []*model.Company{}
	DB.Preload("Config").Find(&comp)
	return comp, nil
}

// CompaniesByName is the resolver for the companiesByName field.
func (r *queryResolver) CompaniesByName(ctx context.Context, name string) ([]*model.Company, error) {
	comp := []*model.Company{}
	DB.Preload("Config").Where("name LIKE ?", "%"+name+"%").Find(&comp)
	return comp, nil
}

// Configs is the resolver for the configs field.
func (r *queryResolver) Configs(ctx context.Context) ([]*model.Config, error) {
	conf := []*model.Config{}
	DB.Find(&conf)
	return conf, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
var (
	DBTodo []*model.Todo
	DB     *gorm.DB
)

func init() {
	DBTodo = append(DBTodo, &model.Todo{
		ID:   "ID1",
		Text: "Text1",
		Done: false,
		User: &model.User{
			ID:   "1",
			Name: "User1",
		},
	})
	DBTodo = append(DBTodo, &model.Todo{
		ID:   "ID2",
		Text: "Text2",
		Done: false,
		User: &model.User{
			ID:   "2",
			Name: "User2",
		},
	})
	DBTodo = append(DBTodo, &model.Todo{
		ID:   "ID3",
		Text: "Text3",
		Done: false,
		User: &model.User{
			ID:   "3",
			Name: "User3",
		},
	})

	// Replace with your MySQL database connection string
	dsn := fmt.Sprintf("root:rootroot@tcp(localhost:3306)/%s?charset=utf8mb4&parseTime=True&loc=Local", "company")

	// Initialize Gorm MySQL driver
	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Info), // Logger configuration
		NamingStrategy: schema.NamingStrategy{
			SingularTable: true,
		},
	})
	if err != nil {
		fmt.Println("Failed to connect to database")
		os.Exit(1)
	}

	DB = db
}
